<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设计模式（1）—— 简单工厂模式（C++）</title>
    <url>/2023/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（1）——-简单工厂模式"><a href="#设计模式（1）——-简单工厂模式" class="headerlink" title="设计模式（1）—— 简单工厂模式"></a><em><strong>设计模式（1）—— 简单工厂模式</strong></em></h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	通过仔细试运用面向使用简单工厂模式设计能够实现包含加法（+）、减法（-）、乘法（*）、除法（&#x2F;）四种运算的计算机程序，要求输入两个数和运算符，得到运算结果。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/1uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleFactory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// while(true) &#123;</span></span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入+-*/任意一个字符：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">&#x27;+&#x27;</span> &amp;&amp; c != <span class="string">&#x27;-&#x27;</span> &amp;&amp; c != <span class="string">&#x27;*&#x27;</span> &amp;&amp; c != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;运算符必须是+-*/四种字符，请重新输入\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; b;</span><br><span class="line">    YunSuan&lt;<span class="type">double</span>&gt; *ys;</span><br><span class="line">    ys = Factory&lt;<span class="type">double</span>&gt;::<span class="built_in">factoryMethod</span>(c);</span><br><span class="line">    ys -&gt; <span class="built_in">initNum</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;运算结果为：\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; ys -&gt; <span class="built_in">getResult</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="简单工厂各类实现："><a href="#简单工厂各类实现：" class="headerlink" title="简单工厂各类实现："></a>简单工厂各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SimpleFactory.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SIMPLEFACTORY__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SIMPLEFACTORY__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuan</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">initNum</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T numA, numB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> YunSuan&lt;T&gt;::<span class="built_in">initNum</span>(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b) &#123;</span><br><span class="line">    numA = a;</span><br><span class="line">    numB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA + <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA - <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA * <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;numB == <span class="number">0</span>) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;浮点错误！被除数不能为0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA / <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> YunSuan&lt;T&gt;* <span class="title">factoryMethod</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">YunSuan&lt;T&gt;* Factory&lt;T&gt;::<span class="built_in">factoryMethod</span>(<span class="type">const</span> <span class="type">char</span>&amp; c) &#123;</span><br><span class="line">    YunSuan&lt;T&gt;* ys;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Add</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Sub</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Mul</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> ys = <span class="keyword">new</span> <span class="built_in">Div</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">return</span> ys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__SIMPLEFACTORY__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/1res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（2）—— 工厂方法模式（C++）</title>
    <url>/2023/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（2）——-工厂方法模式"><a href="#设计模式（2）——-工厂方法模式" class="headerlink" title="设计模式（2）—— 工厂方法模式"></a>设计模式（2）—— 工厂方法模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	使用工厂方法模式设计能够实现包含加法（+）、减法（-）、乘法（*）、除法（&#x2F;）四种运算的计算机程序，要求输入两个数和运算符，得到运算结果。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/2uml.png" alt="img"></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FactoryMehod.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// while(true) &#123;</span></span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入+-*/任意一个字符：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">&#x27;+&#x27;</span> &amp;&amp; c != <span class="string">&#x27;-&#x27;</span> &amp;&amp; c != <span class="string">&#x27;*&#x27;</span> &amp;&amp; c != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;运算符必须是+-*/四种字符，请重新输入\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; b;</span><br><span class="line">    YunSuanFactory&lt;<span class="type">double</span>&gt; *ysf;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>) ysf = <span class="keyword">new</span> AddFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) ysf = <span class="keyword">new</span> SubFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>) ysf = <span class="keyword">new</span> MulFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> ysf = <span class="keyword">new</span> DivFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    YunSuan&lt;<span class="type">double</span>&gt; *ys = ysf -&gt; <span class="built_in">createYunSuan</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;运算结果为：\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; ys -&gt; <span class="built_in">getResult</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="工厂方法各类实现："><a href="#工厂方法各类实现：" class="headerlink" title="工厂方法各类实现："></a>工厂方法各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FactoryMethod.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FactoryMethod__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FactoryMethod__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuan</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">YunSuan</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">numA</span>(a), <span class="built_in">numB</span>(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T numA, numB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Add</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA + <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sub</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA - <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Mul</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA * <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Div</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;numB == <span class="number">0</span>) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;浮点错误！被除数不能为0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA / <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuanFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Add</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Sub</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Mul</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Div</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__FactoryMethod__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/2res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（3）—— 抽象工厂模式（C++）</title>
    <url>/2023/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（3）——-抽象工厂模式"><a href="#设计模式（3）——-抽象工厂模式" class="headerlink" title="设计模式（3）—— 抽象工厂模式"></a>设计模式（3）—— 抽象工厂模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	一个电器工厂可以生产多种类型的电器，如海尔工厂可以生产海尔电视机、海尔空调等，TCL工厂可以生产TCL电视机，TCL空调等，相同品牌的电器构成一个产品族，而相同类型的电器构成了一个产品等级结构，现使用抽象工厂模拟该场景。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/3uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbstractFactory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Factory * f = <span class="keyword">new</span> <span class="built_in">HaierFactory</span>();</span><br><span class="line">    TV * t = f -&gt; <span class="built_in">createTV</span>();</span><br><span class="line">    t -&gt; <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">TCLFactory</span>();</span><br><span class="line">    Air * a = f -&gt; <span class="built_in">createAir</span>();</span><br><span class="line">    a -&gt; <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="抽象工厂各类实现："><a href="#抽象工厂各类实现：" class="headerlink" title="抽象工厂各类实现："></a>抽象工厂各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractFactory.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ABSTRACTFACTORY__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ABSTRACTFACTORY__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierTV</span> : <span class="keyword">public</span> TV</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HaierTV is playing!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLTV</span> : <span class="keyword">public</span> TV</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HaierAir is working!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Air</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierAir</span> : <span class="keyword">public</span> Air</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;TCLTV is playing!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLAir</span> : <span class="keyword">public</span> Air</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;TCLAir is working!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierFactory</span> : <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HaierTV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HaierAir</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLFactory</span> : <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TCLTV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TCLAir</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __ABSTRACTFACTORY__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/3res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（10）—— 命令模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（10）——-命令模式"><a href="#设计模式（10）——-命令模式" class="headerlink" title="设计模式（10）—— 命令模式"></a>设计模式（10）—— 命令模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	现有一个文本编辑器，在该文本编辑器中为客户提供了不同的对文本编辑的展示方式，有按钮型、菜单型，快捷键等。文本编辑主要包括新建文件、打开文件、保存文件等功能，根据客户在展示层的不同选择，该文本编辑器可实现不同的功能。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/10uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Command.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FileButton* fb = <span class="keyword">new</span> <span class="built_in">FileButton</span>();</span><br><span class="line">    Command* c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请选择一个按钮，1为新建文件按钮，2为打开文件按钮，3为保存文件按钮&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    std::cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">        New* n = <span class="keyword">new</span> <span class="built_in">New</span>();</span><br><span class="line">        c = <span class="keyword">new</span> <span class="built_in">NewCmd</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>) &#123;</span><br><span class="line">        Open* o = <span class="keyword">new</span> <span class="built_in">Open</span>();</span><br><span class="line">        c = <span class="keyword">new</span> <span class="built_in">OpenCmd</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">3</span>) &#123;</span><br><span class="line">        Save* s = <span class="keyword">new</span> <span class="built_in">Save</span>();</span><br><span class="line">        c = <span class="keyword">new</span> <span class="built_in">SaveCmd</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;输入错误&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fb -&gt; <span class="built_in">setCommand</span>(c);</span><br><span class="line">    fb -&gt; <span class="built_in">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="命令各类实现："><a href="#命令各类实现：" class="headerlink" title="命令各类实现："></a>命令各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Command.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __COMMAND__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __COMMAND__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileButton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setCommand</span><span class="params">(Command* c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c -&gt; <span class="built_in">execute</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Command* c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">New</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;新建了一个文件&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewCmd</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NewCmd</span>(New* n) : <span class="built_in">n</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n -&gt; <span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    New* n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;打开了一个文件&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenCmd</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">OpenCmd</span>(Open* o) : <span class="built_in">o</span>(o) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        o -&gt; <span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Open* o;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Save</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;文件已经保存了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SaveCmd</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SaveCmd</span>(Save* s) : <span class="built_in">s</span>(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s -&gt; <span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Save* s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __COMMAND__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/10res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（4）—— 适配器模式（C++）</title>
    <url>/2023/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（4）——-适配器模式"><a href="#设计模式（4）——-适配器模式" class="headerlink" title="设计模式（4）—— 适配器模式"></a>设计模式（4）—— 适配器模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	现有一个接口DataOperation定义了排序方法sort(int[])和查找方法search(int[],int)，已知类QuickSort的quickSort(int[])方法实现了快速排序算法，类BinarySearch的binarySearch(int[],int)方法实现了二分查找算法。现使用适配器模式设计一个系统，在不修改源代码的情况下将类QuickSort和类BinarySearch的方法适配到DataOperation接口中。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/4uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cilent.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AdapterPattern.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>&#125;;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;未排序前的数组为：\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> t : a) &#123;</span><br><span class="line">		std::cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DataOperation *d = <span class="keyword">new</span> <span class="built_in">Adapter</span>();</span><br><span class="line">	d-&gt;<span class="built_in">sort</span>(a);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\n快速排序后的数组为：\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> t : a) &#123;</span><br><span class="line">		std::cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\n请输入你要查找的数：\n&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; num;</span><br><span class="line">	d-&gt;<span class="built_in">search</span>(a, num);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="适配器各类实现："><a href="#适配器各类实现：" class="headerlink" title="适配器各类实现："></a>适配器各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AdapterPattern.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ADAPTERPATTERN__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADAPTERPATTERN__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataOperation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">search</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickSort</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">binarySearch</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> it = std::<span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), num);</span><br><span class="line">		<span class="keyword">if</span> (*it == num) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;数字&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;在数组中的索引为：&quot;</span>;</span><br><span class="line">			std::cout &lt;&lt; it - a.<span class="built_in">begin</span>() &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;该数组中没有此数\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> : <span class="keyword">public</span> DataOperation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Adapter</span>() &#123;</span><br><span class="line">		qs = <span class="keyword">new</span> QuickSort;</span><br><span class="line">		bs = <span class="keyword">new</span> BinarySearch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		qs-&gt;<span class="built_in">quickSort</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">		bs-&gt;<span class="built_in">binarySearch</span>(a, num);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	QuickSort *qs;</span><br><span class="line">	BinarySearch *bs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __ADAPTERPATTERN__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/4res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（5）—— 原型模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（5）——-原型模式"><a href="#设计模式（5）——-原型模式" class="headerlink" title="设计模式（5）—— 原型模式"></a>设计模式（5）—— 原型模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	请为某销售管理系统设计并实现一个客户类（Customer），在客户类中包含客户姓名，年龄，客户地址等信息，其中客户地址的类型为Address引用类型，客户地址中包含地址名称，邮政编码等信息。请用浅克隆和深克隆分别实现Customer对象的复制并比较这两种克隆方式的异同。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/5uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PrototypePattern.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Customer *p = <span class="keyword">new</span> <span class="built_in">Customer</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>, <span class="built_in">Address</span>(<span class="string">&quot;China&quot;</span>, <span class="string">&quot;10000&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Customer *q = new Customer;</span></span><br><span class="line">    <span class="comment">// Address *a = new Address;</span></span><br><span class="line">    <span class="comment">// q -&gt; setAddress(*a);</span></span><br><span class="line">    <span class="comment">// Customer *c = q -&gt; sClone();</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; (q == c ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; (q-&gt;getAddress().a_name == c-&gt;getAddress().a_name ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    Customer *c1 = p-&gt;<span class="built_in">sClone</span>();</span><br><span class="line">    p -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    c1 -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    p -&gt; <span class="built_in">setName</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    p -&gt; <span class="built_in">setAddress</span>(<span class="built_in">Address</span>(<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;20000&quot;</span>));</span><br><span class="line">    p -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    c1 -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    std::cout &lt;&lt; (p == c1 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; (p-&gt;<span class="built_in">getAddress</span>().a_name == c1-&gt;<span class="built_in">getAddress</span>().a_name ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Customer *c2 = p-&gt;<span class="built_in">dClone</span>();</span><br><span class="line">    p -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    c2 -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    p -&gt; <span class="built_in">setAddress</span>(<span class="built_in">Address</span>(<span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;30000&quot;</span>));</span><br><span class="line">    p -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    c2 -&gt; <span class="built_in">getMessage</span>();</span><br><span class="line">    std::cout &lt;&lt; (p == c2 ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; (p-&gt;<span class="built_in">getAddress</span>().a_name == c2-&gt;<span class="built_in">getAddress</span>().a_name ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="原型各类实现："><a href="#原型各类实现：" class="headerlink" title="原型各类实现："></a>原型各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrototypePattern.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __PROTOTYPEPATTERN__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PROTOTYPEPATTERN__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Address</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">Address</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> std::string&amp; num)</span><br><span class="line">        : <span class="built_in">a_name</span>(name), <span class="built_in">a_num</span>(num) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    std::string a_name;</span><br><span class="line">    std::string a_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Customer</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">Customer</span>(<span class="type">const</span> std::string&amp; c_name, <span class="type">int</span> c_old, <span class="type">const</span> Address&amp; c_address)</span><br><span class="line">        : <span class="built_in">name</span>(c_name), <span class="built_in">old</span>(c_old), <span class="built_in">address</span>(c_address) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">const</span> std::string&amp; c_name)</span> </span>&#123; name = c_name; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setOld</span><span class="params">(<span class="type">int</span> c_old)</span> </span>&#123; old = c_old; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAddress</span><span class="params">(<span class="type">const</span> Address&amp; c_address)</span> </span>&#123; address = c_address; &#125;</span><br><span class="line">    <span class="function">Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Customer *<span class="title">sClone</span><span class="params">()</span> </span>&#123; <span class="comment">// shallow clone</span></span><br><span class="line">        Customer *p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Customer *<span class="title">dClone</span><span class="params">()</span> </span>&#123; <span class="comment">// deep clone</span></span><br><span class="line">        Customer *p = <span class="keyword">new</span> Customer;</span><br><span class="line">        *p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Old: &quot;</span> &lt;&lt; old &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Address: &quot;</span> &lt;&lt; address.a_name &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; address.a_num &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">int</span> old;</span><br><span class="line">    Address address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __PROTOTYPEPATTERN__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/5res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（7）—— 外观模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（7）——-外观模式"><a href="#设计模式（7）——-外观模式" class="headerlink" title="设计模式（7）—— 外观模式"></a>设计模式（7）—— 外观模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	在电脑主机（MainFrame）中只需要按下主机的开机按钮（on（））,即可调用其它硬件设备和软件的启动方法，如内存（Memory）的自检（check()）、CPU的运行（run()）、硬盘（HardDisk）的读取（read()）、操作系统（OS）的载入（load())等，如果某一过程发生错误则电脑启动失败。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/7uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Facade.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MainFrame* mainFrame = <span class="keyword">new</span> <span class="built_in">MainFrame</span>();</span><br><span class="line">    mainFrame-&gt;<span class="built_in">on</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="外观各类实现："><a href="#外观各类实现：" class="headerlink" title="外观各类实现："></a>外观各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Facade.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FACADE__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FACADE__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Memory check&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;CPU run&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HardDisk</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HardDisk read&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Os</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;OS load&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainFrame</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checker = <span class="keyword">new</span> <span class="built_in">Memory</span>();</span><br><span class="line">        runner = <span class="keyword">new</span> <span class="built_in">Cpu</span>();</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="built_in">HardDisk</span>();</span><br><span class="line">        loader = <span class="keyword">new</span> <span class="built_in">Os</span>();</span><br><span class="line"></span><br><span class="line">        checker-&gt;<span class="built_in">check</span>();</span><br><span class="line">        runner-&gt;<span class="built_in">run</span>();</span><br><span class="line">        reader-&gt;<span class="built_in">read</span>();</span><br><span class="line">        loader-&gt;<span class="built_in">load</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Memory* checker;</span><br><span class="line">    Cpu* runner;</span><br><span class="line">    HardDisk* reader;</span><br><span class="line">    Os* loader;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __FACADE__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/7res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（6）—— 桥接模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（6）——-桥接模式"><a href="#设计模式（6）——-桥接模式" class="headerlink" title="设计模式（6）—— 桥接模式"></a>设计模式（6）—— 桥接模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	在HuntBird游戏中，需要模拟不同鸟的多种行为，鸟类中提供了对其各种行为信息进行显示的show()方法，目前游戏需要呈现的是鸽子和企鹅的飞和游泳行为，现使用桥接模式设计该游戏（设计需要考虑到后期鸟的种类和行为的变化性）。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/6uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Bridge.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//while(true) &#123;</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入你需要测试的鸟儿，1代表鸽子，2代表老鹰，3代表企鹅&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    std::cin &gt;&gt; choice;</span><br><span class="line">    Bird *bird;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="number">1</span>)</span><br><span class="line">        bird = <span class="keyword">new</span> <span class="built_in">GeZi</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>)</span><br><span class="line">        bird = <span class="keyword">new</span> <span class="built_in">LaoY</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">3</span>)</span><br><span class="line">        bird = <span class="keyword">new</span> <span class="built_in">QiE</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;输入错误&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bird-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="桥接各类实现："><a href="#桥接各类实现：" class="headerlink" title="桥接各类实现："></a>桥接各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bridge.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __BRIDGE__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __BRIDGE__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showFly</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Swim</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showSwim</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanFly</span> : <span class="keyword">public</span> Fly</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;会飞&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanNotFly</span> : <span class="keyword">public</span> Fly</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;不会飞&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanSwim</span> : <span class="keyword">public</span> Swim</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showSwim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;会游泳&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanNotSwim</span> : <span class="keyword">public</span> Swim</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showSwim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;不会游泳&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setFly</span><span class="params">(Fly *f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;f = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSwim</span><span class="params">(Swim *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Fly *f;</span><br><span class="line">    Swim *s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LaoY</span> : <span class="keyword">public</span> Bird</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;老鹰&quot;</span> ;</span><br><span class="line">        <span class="built_in">setFly</span>(<span class="keyword">new</span> <span class="built_in">CanFly</span>());</span><br><span class="line">        <span class="built_in">setSwim</span>(<span class="keyword">new</span> <span class="built_in">CanNotSwim</span>());</span><br><span class="line">        f-&gt;<span class="built_in">showFly</span>();</span><br><span class="line">        s-&gt;<span class="built_in">showSwim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeZi</span> : <span class="keyword">public</span> Bird</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;鸽子&quot;</span> ;</span><br><span class="line">        <span class="built_in">setFly</span>(<span class="keyword">new</span> <span class="built_in">CanFly</span>());</span><br><span class="line">        <span class="built_in">setSwim</span>(<span class="keyword">new</span> <span class="built_in">CanNotSwim</span>());</span><br><span class="line">        f-&gt;<span class="built_in">showFly</span>();</span><br><span class="line">        s-&gt;<span class="built_in">showSwim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QiE</span> : <span class="keyword">public</span> Bird</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;企鹅&quot;</span> ;</span><br><span class="line">        <span class="built_in">setFly</span>(<span class="keyword">new</span> <span class="built_in">CanNotFly</span>());</span><br><span class="line">        <span class="built_in">setSwim</span>(<span class="keyword">new</span> <span class="built_in">CanSwim</span>());</span><br><span class="line">        f-&gt;<span class="built_in">showFly</span>();</span><br><span class="line">        s-&gt;<span class="built_in">showSwim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __BRIDGE__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/6res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（8）—— 装饰者模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（8）——-装饰者模式"><a href="#设计模式（8）——-装饰者模式" class="headerlink" title="设计模式（8）—— 装饰者模式"></a>设计模式（8）—— 装饰者模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	某家咖啡店在卖咖啡时可以根据顾客的要求在其中加入各种配料，咖啡店会根据所加入的配料来计算总费用，咖啡店所供应的咖啡机配料的种类和价格如下表所示：</p>
<table>
<thead>
<tr>
<th>咖啡</th>
<th>价格&#x2F;杯(元)</th>
<th>配料</th>
<th>价格&#x2F;份(元)</th>
</tr>
</thead>
<tbody><tr>
<td>蓝山咖啡（BlueCoffee）</td>
<td>8</td>
<td>牛奶（Milk）</td>
<td>2</td>
</tr>
<tr>
<td>拿铁咖啡（NatieCoffee）</td>
<td>10</td>
<td>橙汁（Orange）</td>
<td>3</td>
</tr>
</tbody></table>
<p>试用装饰者模式为该咖啡店设计一个程序以实现计算费用的功能，输出每种饮料的详细信息描述及花费。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/8uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Decorator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Component* coffee = <span class="keyword">new</span> <span class="built_in">BlueCoffee</span>();</span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">Milk</span>(coffee);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;加了&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;的价格为：&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">cost</span>() &lt;&lt; <span class="string">&quot;元&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">NatieCoffee</span>();</span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">Orange</span>(coffee);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;加了&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;的价格为：&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">cost</span>() &lt;&lt; <span class="string">&quot;元&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">BlueCoffee</span>();</span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">Orange</span>(coffee);</span><br><span class="line">    coffee = <span class="keyword">new</span> <span class="built_in">Milk</span>(coffee);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;加了&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;的价格为：&quot;</span> &lt;&lt; coffee-&gt;<span class="built_in">cost</span>() &lt;&lt; <span class="string">&quot;元&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="装饰者各类实现："><a href="#装饰者各类实现：" class="headerlink" title="装饰者各类实现："></a>装饰者各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decorator.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DECORATOR__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DECORATOR__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">cost</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlueCoffee</span> : <span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;蓝山咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NatieCoffee</span> : <span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComponentDecorator</span> : <span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Component* component;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> : <span class="keyword">public</span> ComponentDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Milk</span>(Component* component) : <span class="built_in">component</span>(component) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;牛奶&quot;</span> + component-&gt;<span class="built_in">getName</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> + component-&gt;<span class="built_in">cost</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Component* component;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> : <span class="keyword">public</span> ComponentDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Orange</span>(Component* component) : <span class="built_in">component</span>(component) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;橙汁&quot;</span> + component-&gt;<span class="built_in">getName</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> + component-&gt;<span class="built_in">cost</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Component* component;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __DECORATOR__</span></span></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/8res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（9）—— 职责链模式（C++）</title>
    <url>/2023/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（9）——-职责链模式"><a href="#设计模式（9）——-职责链模式" class="headerlink" title="设计模式（9）—— 职责链模式"></a>设计模式（9）—— 职责链模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	某OA系统需要提供一个假条审批的模块，如果员工请假天数小于3天，主任可以审批该请假条；如果员工请假天数大于等于3天，小于10天，经理可以审批；如果员工请假天数大于等于10天，小于30天，总经理可以审批；如果超过30天，总经理也不能审批，提示相应的拒绝信息。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/9uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ChainOfResponsibility.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Handler *a = <span class="keyword">new</span> Director;</span><br><span class="line">	Handler *b = <span class="keyword">new</span> Manager;</span><br><span class="line">	Handler *c = <span class="keyword">new</span> GManager;</span><br><span class="line">	Handler *d = <span class="keyword">new</span> Repulse;</span><br><span class="line">	</span><br><span class="line">	a-&gt;<span class="built_in">setNext</span>(b);</span><br><span class="line">	b-&gt;<span class="built_in">setNext</span>(c);</span><br><span class="line">	c-&gt;<span class="built_in">setNext</span>(d);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//while(true) &#123;</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;请输入请假天数：\n&quot;</span>;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	std::cin &gt;&gt; num;</span><br><span class="line">	a-&gt;<span class="built_in">handler</span>(num);</span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="职责链各类实现："><a href="#职责链各类实现：" class="headerlink" title="职责链各类实现："></a>职责链各类实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChainOfResponsibility.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __CHAINOFRESPONSIBILITY__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __CHAINOFRESPONSIBILITY__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setNext</span><span class="params">(Handler* h)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;next = h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	Handler* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> : <span class="keyword">public</span> Handler</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(num &lt; <span class="number">3</span>) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;主任审批&quot;</span> &lt;&lt; num &lt;&lt;<span class="string">&quot;天假期，请假成功！\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>-&gt;next-&gt;<span class="built_in">handler</span>(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> :  <span class="keyword">public</span> Handler</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(num &gt;= <span class="number">3</span> &amp;&amp; num &lt;<span class="number">10</span>) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;经理审批&quot;</span> &lt;&lt; num &lt;&lt;<span class="string">&quot;天假期，请假成功！\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>-&gt;next-&gt;<span class="built_in">handler</span>(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GManager</span> : <span class="keyword">public</span> Handler</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(num &gt;= <span class="number">10</span> &amp;&amp; num &lt;<span class="number">30</span>) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;总经理审批&quot;</span> &lt;&lt; num &lt;&lt;<span class="string">&quot;天假期，请假成功！\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>-&gt;next-&gt;<span class="built_in">handler</span>(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Repulse</span> : <span class="keyword">public</span> Handler</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">handler</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(num &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;请假天数过长，总经理无权审批！\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __CHAINOFRESPONSIBILITY__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/9res.png" alt="img"></p>
]]></content>
  </entry>
</search>
