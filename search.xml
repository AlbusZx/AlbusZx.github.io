<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>设计模式（1）—— 简单工厂模式（C++）</title>
    <url>/2023/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（1）——-简单工厂模式"><a href="#设计模式（1）——-简单工厂模式" class="headerlink" title="设计模式（1）—— 简单工厂模式"></a><em><strong>设计模式（1）—— 简单工厂模式</strong></em></h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	通过仔细试运用面向使用简单工厂模式设计能够实现包含加法（+）、减法（-）、乘法（*）、除法（&#x2F;）四种运算的计算机程序，要求输入两个数和运算符，得到运算结果。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/1uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleFactory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// while(true) &#123;</span></span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入+-*/任意一个字符：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">&#x27;+&#x27;</span> &amp;&amp; c != <span class="string">&#x27;-&#x27;</span> &amp;&amp; c != <span class="string">&#x27;*&#x27;</span> &amp;&amp; c != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;运算符必须是+-*/四种字符，请重新输入\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; b;</span><br><span class="line">    YunSuan&lt;<span class="type">double</span>&gt; *ys;</span><br><span class="line">    ys = Factory&lt;<span class="type">double</span>&gt;::<span class="built_in">factoryMethod</span>(c);</span><br><span class="line">    ys -&gt; <span class="built_in">initNum</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;运算结果为：\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; ys -&gt; <span class="built_in">getResult</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="简单工厂各类实现："><a href="#简单工厂各类实现：" class="headerlink" title="简单工厂各类实现："></a>简单工厂各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SimpleFactory.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SIMPLEFACTORY__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SIMPLEFACTORY__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuan</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">initNum</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T numA, numB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> YunSuan&lt;T&gt;::<span class="built_in">initNum</span>(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b) &#123;</span><br><span class="line">    numA = a;</span><br><span class="line">    numB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA + <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA - <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA * <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;numB == <span class="number">0</span>) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;浮点错误！被除数不能为0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA / <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> YunSuan&lt;T&gt;* <span class="title">factoryMethod</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">YunSuan&lt;T&gt;* Factory&lt;T&gt;::<span class="built_in">factoryMethod</span>(<span class="type">const</span> <span class="type">char</span>&amp; c) &#123;</span><br><span class="line">    YunSuan&lt;T&gt;* ys;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Add</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Sub</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>) ys = <span class="keyword">new</span> <span class="built_in">Mul</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">else</span> ys = <span class="keyword">new</span> <span class="built_in">Div</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">return</span> ys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__SIMPLEFACTORY__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/1res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（2）—— 工厂方法模式（C++）</title>
    <url>/2023/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（2）——-工厂方法模式"><a href="#设计模式（2）——-工厂方法模式" class="headerlink" title="设计模式（2）—— 工厂方法模式"></a>设计模式（2）—— 工厂方法模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	使用工厂方法模式设计能够实现包含加法（+）、减法（-）、乘法（*）、除法（&#x2F;）四种运算的计算机程序，要求输入两个数和运算符，得到运算结果。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/2uml.png" alt="img"></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FactoryMehod.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// while(true) &#123;</span></span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入+-*/任意一个字符：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">&#x27;+&#x27;</span> &amp;&amp; c != <span class="string">&#x27;-&#x27;</span> &amp;&amp; c != <span class="string">&#x27;*&#x27;</span> &amp;&amp; c != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;运算符必须是+-*/四种字符，请重新输入\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入一个数：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; b;</span><br><span class="line">    YunSuanFactory&lt;<span class="type">double</span>&gt; *ysf;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>) ysf = <span class="keyword">new</span> AddFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) ysf = <span class="keyword">new</span> SubFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>) ysf = <span class="keyword">new</span> MulFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    <span class="keyword">else</span> ysf = <span class="keyword">new</span> DivFactory&lt;<span class="type">double</span>&gt;;</span><br><span class="line">    YunSuan&lt;<span class="type">double</span>&gt; *ys = ysf -&gt; <span class="built_in">createYunSuan</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;运算结果为：\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; ys -&gt; <span class="built_in">getResult</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="工厂方法各类实现："><a href="#工厂方法各类实现：" class="headerlink" title="工厂方法各类实现："></a>工厂方法各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FactoryMethod.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FactoryMethod__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FactoryMethod__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuan</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">YunSuan</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">numA</span>(a), <span class="built_in">numB</span>(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T numA, numB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Add</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA + <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sub</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA - <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Mul</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA * <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Div</span> : <span class="keyword">public</span> YunSuan&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Div</span>(<span class="type">const</span> T &amp;a, <span class="type">const</span> T &amp;b) : <span class="built_in">YunSuan</span>&lt;T&gt;(a, b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;numB == <span class="number">0</span>) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;浮点错误！被除数不能为0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;numA / <span class="keyword">this</span>-&gt;numB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YunSuanFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Add</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Sub</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Mul</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivFactory</span> : <span class="keyword">public</span> YunSuanFactory&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> YunSuan&lt;T&gt;* <span class="title">createYunSuan</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Div</span>&lt;T&gt;(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//__FactoryMethod__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/2res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（3）—— 抽象工厂模式（C++）</title>
    <url>/2023/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（3）——-抽象工厂模式"><a href="#设计模式（3）——-抽象工厂模式" class="headerlink" title="设计模式（3）—— 抽象工厂模式"></a>设计模式（3）—— 抽象工厂模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	一个电器工厂可以生产多种类型的电器，如海尔工厂可以生产海尔电视机、海尔空调等，TCL工厂可以生产TCL电视机，TCL空调等，相同品牌的电器构成一个产品族，而相同类型的电器构成了一个产品等级结构，现使用抽象工厂模拟该场景。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/3uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbstractFactory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Factory * f = <span class="keyword">new</span> <span class="built_in">HaierFactory</span>();</span><br><span class="line">    TV * t = f -&gt; <span class="built_in">createTV</span>();</span><br><span class="line">    t -&gt; <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    f = <span class="keyword">new</span> <span class="built_in">TCLFactory</span>();</span><br><span class="line">    Air * a = f -&gt; <span class="built_in">createAir</span>();</span><br><span class="line">    a -&gt; <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="抽象工厂各类实现："><a href="#抽象工厂各类实现：" class="headerlink" title="抽象工厂各类实现："></a>抽象工厂各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractFactory.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ABSTRACTFACTORY__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ABSTRACTFACTORY__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierTV</span> : <span class="keyword">public</span> TV</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HaierTV is playing!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLTV</span> : <span class="keyword">public</span> TV</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HaierAir is working!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Air</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierAir</span> : <span class="keyword">public</span> Air</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;TCLTV is playing!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLAir</span> : <span class="keyword">public</span> Air</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;TCLAir is working!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaierFactory</span> : <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HaierTV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HaierAir</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCLFactory</span> : <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TV * <span class="title">createTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TCLTV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Air * <span class="title">createAir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TCLAir</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __ABSTRACTFACTORY__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/3res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式（4）—— 适配器模式（C++）</title>
    <url>/2023/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式（4）——-适配器模式"><a href="#设计模式（4）——-适配器模式" class="headerlink" title="设计模式（4）—— 适配器模式"></a>设计模式（4）—— 适配器模式</h1><h2 id="实现内容："><a href="#实现内容：" class="headerlink" title="实现内容："></a>实现内容：</h2><p>​	现有一个接口DataOperation定义了排序方法sort(int[])和查找方法search(int[],int)，已知类QuickSort的quickSort(int[])方法实现了快速排序算法，类BinarySearch的binarySearch(int[],int)方法实现了二分查找算法。现使用适配器模式设计一个系统，在不修改源代码的情况下将类QuickSort和类BinarySearch的方法适配到DataOperation接口中。</p>
<span id="more"></span>

<h2 id="UML类图："><a href="#UML类图：" class="headerlink" title="UML类图："></a>UML类图：</h2><p><img src="/images/4uml.png" alt="img"></p>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cilent.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AdapterPattern.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>&#125;;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;未排序前的数组为：\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> t : a) &#123;</span><br><span class="line">		std::cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DataOperation *d = <span class="keyword">new</span> <span class="built_in">Adapter</span>();</span><br><span class="line">	d-&gt;<span class="built_in">sort</span>(a);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\n快速排序后的数组为：\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> t : a) &#123;</span><br><span class="line">		std::cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;\n请输入你要查找的数：\n&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; num;</span><br><span class="line">	d-&gt;<span class="built_in">search</span>(a, num);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="适配器各类实现："><a href="#适配器各类实现：" class="headerlink" title="适配器各类实现："></a>适配器各类实现：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AdapterPattern.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ADAPTERPATTERN__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADAPTERPATTERN__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataOperation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">search</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickSort</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">binarySearch</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> it = std::<span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), num);</span><br><span class="line">		<span class="keyword">if</span> (*it == num) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;数字&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;在数组中的索引为：&quot;</span>;</span><br><span class="line">			std::cout &lt;&lt; it - a.<span class="built_in">begin</span>() &lt;&lt; std::endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;该数组中没有此数\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> : <span class="keyword">public</span> DataOperation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Adapter</span>() &#123;</span><br><span class="line">		qs = <span class="keyword">new</span> QuickSort;</span><br><span class="line">		bs = <span class="keyword">new</span> BinarySearch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		qs-&gt;<span class="built_in">quickSort</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">		bs-&gt;<span class="built_in">binarySearch</span>(a, num);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	QuickSort *qs;</span><br><span class="line">	BinarySearch *bs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __ADAPTERPATTERN__</span></span></span><br></pre></td></tr></table></figure>



<h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p><img src="/images/4res.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
